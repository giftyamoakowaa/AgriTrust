openapi: 3.0.0
info:
  title: Agritech API
  version: 1.0.0
  description: API documentation for the Agritech project
  contact:
    name: Your Name
    email: your.email@example.com
servers:
  - url: http://localhost:6000/api
    description: Local development server
  - url: https://agritrust.onrender.com/api
    description: Render deployed server
tags:
  - name: Users
    description: User management API
  - name: Authentication # <-- NEW: Authentication Tag
    description: User authentication and authorization
paths:
  /users:
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                mobile:
                  type: string
                  description: Mobile number of the user
                gender:
                  type: string
                  enum: ['Male', 'Female']
                  description: Gender of the user
                email:
                  type: string
                  format: email
                  description: Email address (optional)
                password: # <-- ADDED: Password for user creation (sign-up)
                  type: string
                  description: User's password (will be hashed)
                  example: 'securepassword123'
                ghanaCardImage:
                  type: string
                  format: binary
                  description: Image file for Ghana Card
              required:
                - name
                - mobile
                - gender
                - password # <-- Added password to required fields
                - ghanaCardImage
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Ghana Card image and/or password is required
        '500':
          description: Server error
    get:
      summary: Get all users
      tags: [Users]
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error
  /users/{id}:
    put:
      summary: Update a user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the user to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string }
                mobile: { type: string }
                gender: { type: string, enum: ['Male', 'Female'] }
                email: { type: string, format: email }
                password: # <-- ADDED: Optional password update
                  type: string
                  description: New password (optional, will be hashed if provided)
                  example: 'newsecurepassword'
                ghanaCardImage: { type: string, format: binary, description: 'New image file (optional)' }
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error
    delete:
      summary: Delete a user by ID
      tags: [Users]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted
        '404':
          description: User not found
        '500':
          description: Server error
  /auth/login: # <-- NEW: Login Path and its details
    post:
      summary: User login
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - mobile
                - password
              properties:
                mobile:
                  type: string
                  description: User's mobile number
                  example: '0241234567'
                password:
                  type: string
                  description: User's password
                  example: 'MySecurePassword123'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  _id:
                    type: string
                    example: '65c3b1e3a4b5c6d7e8f9a0b1'
                  name:
                    type: string
                    example: 'John Doe'
                  mobile:
                    type: string
                    example: '0241234567'
                  email:
                    type: string
                    example: 'john.doe@example.com'
                  token:
                    type: string
                    description: JWT authentication token
        '401':
          description: Invalid mobile or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid mobile or password
        '500':
          description: Server error
components:
  schemas:
    User:
      type: object
      required: ['name', 'mobile', 'gender', 'password', 'ghanaCardImage'] # <-- Added password to required
      properties:
        _id: { type: 'string', description: 'MongoDB ObjectId' }
        name: { type: 'string', description: 'Name of the user' }
        mobile: { type: 'string', description: 'Mobile number of the user' }
        gender: { type: 'string', enum: ['Male', 'Female'], description: 'Gender of the user' }
        email: { type: 'string', format: 'email', description: 'Email address of the user (optional)' }
        password: { type: 'string', description: 'Hashed password' } # <-- Added password property
        ghanaCardImage: { type: 'string', description: 'Path to the Ghana Card image' }
        createdAt: { type: 'string', format: 'date-time' }
        updatedAt: { type: 'string', format: 'date-time' }